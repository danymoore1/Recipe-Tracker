'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3603
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsOrderHeader"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsOrderHeader
    Inherits Global.System.Data.DataSet
    
    Private tableOrderHeader As OrderHeaderDataTable
    
    Private tableinvRpt As invRptDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("OrderHeader")) Is Nothing) Then
                MyBase.Tables.Add(New OrderHeaderDataTable(ds.Tables("OrderHeader")))
            End If
            If (Not (ds.Tables("invRpt")) Is Nothing) Then
                MyBase.Tables.Add(New invRptDataTable(ds.Tables("invRpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property OrderHeader() As OrderHeaderDataTable
        Get
            Return Me.tableOrderHeader
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property invRpt() As invRptDataTable
        Get
            Return Me.tableinvRpt
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsOrderHeader = CType(MyBase.Clone,dsOrderHeader)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("OrderHeader")) Is Nothing) Then
                MyBase.Tables.Add(New OrderHeaderDataTable(ds.Tables("OrderHeader")))
            End If
            If (Not (ds.Tables("invRpt")) Is Nothing) Then
                MyBase.Tables.Add(New invRptDataTable(ds.Tables("invRpt")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableOrderHeader = CType(MyBase.Tables("OrderHeader"),OrderHeaderDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrderHeader) Is Nothing) Then
                Me.tableOrderHeader.InitVars
            End If
        End If
        Me.tableinvRpt = CType(MyBase.Tables("invRpt"),invRptDataTable)
        If (initTable = true) Then
            If (Not (Me.tableinvRpt) Is Nothing) Then
                Me.tableinvRpt.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsOrderHeader"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsOrderHeader.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableOrderHeader = New OrderHeaderDataTable
        MyBase.Tables.Add(Me.tableOrderHeader)
        Me.tableinvRpt = New invRptDataTable
        MyBase.Tables.Add(Me.tableinvRpt)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeOrderHeader() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeinvRpt() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsOrderHeader = New dsOrderHeader
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub OrderHeaderRowChangeEventHandler(ByVal sender As Object, ByVal e As OrderHeaderRowChangeEvent)
    
    Public Delegate Sub invRptRowChangeEventHandler(ByVal sender As Object, ByVal e As invRptRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class OrderHeaderDataTable
        Inherits Global.System.Data.TypedTableBase(Of OrderHeaderRow)
        
        Private columnOrderNo As Global.System.Data.DataColumn
        
        Private columnOrderDate As Global.System.Data.DataColumn
        
        Private columnShipDate As Global.System.Data.DataColumn
        
        Private columnDeliveryDate As Global.System.Data.DataColumn
        
        Private columnPickUpDate As Global.System.Data.DataColumn
        
        Private columnPONO As Global.System.Data.DataColumn
        
        Private columnBillToCode As Global.System.Data.DataColumn
        
        Private columnShipToCode As Global.System.Data.DataColumn
        
        Private columnShipToAddr1 As Global.System.Data.DataColumn
        
        Private columnShipToAddr2 As Global.System.Data.DataColumn
        
        Private columnShipToCity As Global.System.Data.DataColumn
        
        Private columnShiptoState As Global.System.Data.DataColumn
        
        Private columnShipToZip As Global.System.Data.DataColumn
        
        Private columnSalesperson As Global.System.Data.DataColumn
        
        Private columnOrderStatus As Global.System.Data.DataColumn
        
        Private columnShipTermsUID As Global.System.Data.DataColumn
        
        Private columnNetTermsUID As Global.System.Data.DataColumn
        
        Private columnShipToName As Global.System.Data.DataColumn
        
        Private columnShipmentNo As Global.System.Data.DataColumn
        
        Private columnCustOrderNo As Global.System.Data.DataColumn
        
        Private columnOrdrHeaderUID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "OrderHeader"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeliveryDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeliveryDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PickUpDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPickUpDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PONOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPONO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToAddr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToAddr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShiptoStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShiptoState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalespersonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalesperson
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrderStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipTermsUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipTermsUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NetTermsUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNetTermsUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipmentNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipmentNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustOrderNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustOrderNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdrHeaderUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrdrHeaderUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As OrderHeaderRow
            Get
                Return CType(Me.Rows(index),OrderHeaderRow)
            End Get
        End Property
        
        Public Event OrderHeaderRowChanging As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowChanged As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowDeleting As OrderHeaderRowChangeEventHandler
        
        Public Event OrderHeaderRowDeleted As OrderHeaderRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddOrderHeaderRow(ByVal row As OrderHeaderRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddOrderHeaderRow( _
                    ByVal OrderNo As String,  _
                    ByVal OrderDate As Date,  _
                    ByVal ShipDate As Date,  _
                    ByVal DeliveryDate As Date,  _
                    ByVal PickUpDate As Date,  _
                    ByVal PONO As String,  _
                    ByVal BillToCode As Integer,  _
                    ByVal ShipToCode As Integer,  _
                    ByVal ShipToAddr1 As String,  _
                    ByVal ShipToAddr2 As String,  _
                    ByVal ShipToCity As String,  _
                    ByVal ShiptoState As String,  _
                    ByVal ShipToZip As String,  _
                    ByVal Salesperson As Integer,  _
                    ByVal OrderStatus As String,  _
                    ByVal ShipTermsUID As Integer,  _
                    ByVal NetTermsUID As Integer,  _
                    ByVal ShipToName As String,  _
                    ByVal ShipmentNo As String,  _
                    ByVal CustOrderNo As String) As OrderHeaderRow
            Dim rowOrderHeaderRow As OrderHeaderRow = CType(Me.NewRow,OrderHeaderRow)
            Dim columnValuesArray() As Object = New Object() {OrderNo, OrderDate, ShipDate, DeliveryDate, PickUpDate, PONO, BillToCode, ShipToCode, ShipToAddr1, ShipToAddr2, ShipToCity, ShiptoState, ShipToZip, Salesperson, OrderStatus, ShipTermsUID, NetTermsUID, ShipToName, ShipmentNo, CustOrderNo, Nothing}
            rowOrderHeaderRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowOrderHeaderRow)
            Return rowOrderHeaderRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOrdrHeaderUID(ByVal OrdrHeaderUID As Integer) As OrderHeaderRow
            Return CType(Me.Rows.Find(New Object() {OrdrHeaderUID}),OrderHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As OrderHeaderDataTable = CType(MyBase.Clone,OrderHeaderDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New OrderHeaderDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOrderNo = MyBase.Columns("OrderNo")
            Me.columnOrderDate = MyBase.Columns("OrderDate")
            Me.columnShipDate = MyBase.Columns("ShipDate")
            Me.columnDeliveryDate = MyBase.Columns("DeliveryDate")
            Me.columnPickUpDate = MyBase.Columns("PickUpDate")
            Me.columnPONO = MyBase.Columns("PONO")
            Me.columnBillToCode = MyBase.Columns("BillToCode")
            Me.columnShipToCode = MyBase.Columns("ShipToCode")
            Me.columnShipToAddr1 = MyBase.Columns("ShipToAddr1")
            Me.columnShipToAddr2 = MyBase.Columns("ShipToAddr2")
            Me.columnShipToCity = MyBase.Columns("ShipToCity")
            Me.columnShiptoState = MyBase.Columns("ShiptoState")
            Me.columnShipToZip = MyBase.Columns("ShipToZip")
            Me.columnSalesperson = MyBase.Columns("Salesperson")
            Me.columnOrderStatus = MyBase.Columns("OrderStatus")
            Me.columnShipTermsUID = MyBase.Columns("ShipTermsUID")
            Me.columnNetTermsUID = MyBase.Columns("NetTermsUID")
            Me.columnShipToName = MyBase.Columns("ShipToName")
            Me.columnShipmentNo = MyBase.Columns("ShipmentNo")
            Me.columnCustOrderNo = MyBase.Columns("CustOrderNo")
            Me.columnOrdrHeaderUID = MyBase.Columns("OrdrHeaderUID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOrderNo = New Global.System.Data.DataColumn("OrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderNo)
            Me.columnOrderDate = New Global.System.Data.DataColumn("OrderDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderDate)
            Me.columnShipDate = New Global.System.Data.DataColumn("ShipDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipDate)
            Me.columnDeliveryDate = New Global.System.Data.DataColumn("DeliveryDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeliveryDate)
            Me.columnPickUpDate = New Global.System.Data.DataColumn("PickUpDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPickUpDate)
            Me.columnPONO = New Global.System.Data.DataColumn("PONO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPONO)
            Me.columnBillToCode = New Global.System.Data.DataColumn("BillToCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToCode)
            Me.columnShipToCode = New Global.System.Data.DataColumn("ShipToCode", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToCode)
            Me.columnShipToAddr1 = New Global.System.Data.DataColumn("ShipToAddr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToAddr1)
            Me.columnShipToAddr2 = New Global.System.Data.DataColumn("ShipToAddr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToAddr2)
            Me.columnShipToCity = New Global.System.Data.DataColumn("ShipToCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToCity)
            Me.columnShiptoState = New Global.System.Data.DataColumn("ShiptoState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShiptoState)
            Me.columnShipToZip = New Global.System.Data.DataColumn("ShipToZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToZip)
            Me.columnSalesperson = New Global.System.Data.DataColumn("Salesperson", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalesperson)
            Me.columnOrderStatus = New Global.System.Data.DataColumn("OrderStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderStatus)
            Me.columnShipTermsUID = New Global.System.Data.DataColumn("ShipTermsUID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipTermsUID)
            Me.columnNetTermsUID = New Global.System.Data.DataColumn("NetTermsUID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNetTermsUID)
            Me.columnShipToName = New Global.System.Data.DataColumn("ShipToName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToName)
            Me.columnShipmentNo = New Global.System.Data.DataColumn("ShipmentNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipmentNo)
            Me.columnCustOrderNo = New Global.System.Data.DataColumn("CustOrderNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustOrderNo)
            Me.columnOrdrHeaderUID = New Global.System.Data.DataColumn("OrdrHeaderUID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrdrHeaderUID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnOrdrHeaderUID}, true))
            Me.columnOrderNo.MaxLength = 20
            Me.columnPONO.MaxLength = 50
            Me.columnShipToAddr1.MaxLength = 50
            Me.columnShipToAddr2.MaxLength = 50
            Me.columnShipToCity.MaxLength = 50
            Me.columnShiptoState.MaxLength = 10
            Me.columnShipToZip.MaxLength = 10
            Me.columnOrderStatus.MaxLength = 2
            Me.columnShipToName.MaxLength = 50
            Me.columnShipmentNo.MaxLength = 50
            Me.columnCustOrderNo.MaxLength = 35
            Me.columnOrdrHeaderUID.AutoIncrement = true
            Me.columnOrdrHeaderUID.AutoIncrementSeed = -1
            Me.columnOrdrHeaderUID.AutoIncrementStep = -1
            Me.columnOrdrHeaderUID.AllowDBNull = false
            Me.columnOrdrHeaderUID.ReadOnly = true
            Me.columnOrdrHeaderUID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewOrderHeaderRow() As OrderHeaderRow
            Return CType(Me.NewRow,OrderHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New OrderHeaderRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(OrderHeaderRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrderHeaderRowChangedEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowChanged(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrderHeaderRowChangingEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowChanging(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrderHeaderRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowDeleted(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrderHeaderRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrderHeaderRowDeleting(Me, New OrderHeaderRowChangeEvent(CType(e.Row,OrderHeaderRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveOrderHeaderRow(ByVal row As OrderHeaderRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrderHeader = New dsOrderHeader
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrderHeaderDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class invRptDataTable
        Inherits Global.System.Data.TypedTableBase(Of invRptRow)
        
        Private columnInvDate As Global.System.Data.DataColumn
        
        Private columnInvoiceNo As Global.System.Data.DataColumn
        
        Private columnBillToName As Global.System.Data.DataColumn
        
        Private columnBillToAddr1 As Global.System.Data.DataColumn
        
        Private columnBillToAddr2 As Global.System.Data.DataColumn
        
        Private columnBillToCity As Global.System.Data.DataColumn
        
        Private columnBillToState As Global.System.Data.DataColumn
        
        Private columnBillToZip As Global.System.Data.DataColumn
        
        Private columnShipToName As Global.System.Data.DataColumn
        
        Private columnShipToAddr1 As Global.System.Data.DataColumn
        
        Private columnShipToAddr2 As Global.System.Data.DataColumn
        
        Private columnShipToCity As Global.System.Data.DataColumn
        
        Private columnShipToState As Global.System.Data.DataColumn
        
        Private columnShipToZip As Global.System.Data.DataColumn
        
        Private columnCustomerPO As Global.System.Data.DataColumn
        
        Private columnOrderno As Global.System.Data.DataColumn
        
        Private columnCustomerItemNo As Global.System.Data.DataColumn
        
        Private columnQty As Global.System.Data.DataColumn
        
        Private columnCusPackDesc As Global.System.Data.DataColumn
        
        Private columnItemNo As Global.System.Data.DataColumn
        
        Private columnCaseQty As Global.System.Data.DataColumn
        
        Private columnUnitCost As Global.System.Data.DataColumn
        
        Private columnCaseCost As Global.System.Data.DataColumn
        
        Private columnExtCost As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "invRpt"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InvoiceNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInvoiceNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToAddr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToAddr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BillToZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBillToZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToAddr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToAddr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToAddr2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToAddr2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToCityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShipToZipColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShipToZip
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrdernoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrderno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomerItemNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomerItemNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CusPackDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCusPackDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ItemNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItemNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaseQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaseQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnitCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CaseCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCaseCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExtCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExtCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As invRptRow
            Get
                Return CType(Me.Rows(index),invRptRow)
            End Get
        End Property
        
        Public Event invRptRowChanging As invRptRowChangeEventHandler
        
        Public Event invRptRowChanged As invRptRowChangeEventHandler
        
        Public Event invRptRowDeleting As invRptRowChangeEventHandler
        
        Public Event invRptRowDeleted As invRptRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddinvRptRow(ByVal row As invRptRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddinvRptRow( _
                    ByVal InvDate As Date,  _
                    ByVal InvoiceNo As Integer,  _
                    ByVal BillToName As String,  _
                    ByVal BillToAddr1 As String,  _
                    ByVal BillToAddr2 As String,  _
                    ByVal BillToCity As String,  _
                    ByVal BillToState As String,  _
                    ByVal BillToZip As String,  _
                    ByVal ShipToName As String,  _
                    ByVal ShipToAddr1 As String,  _
                    ByVal ShipToAddr2 As String,  _
                    ByVal ShipToCity As String,  _
                    ByVal ShipToState As String,  _
                    ByVal ShipToZip As String,  _
                    ByVal CustomerPO As String,  _
                    ByVal Orderno As String,  _
                    ByVal CustomerItemNo As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal CusPackDesc As String,  _
                    ByVal ItemNo As String,  _
                    ByVal CaseQty As Integer,  _
                    ByVal UnitCost As Decimal,  _
                    ByVal CaseCost As Decimal,  _
                    ByVal ExtCost As Decimal) As invRptRow
            Dim rowinvRptRow As invRptRow = CType(Me.NewRow,invRptRow)
            Dim columnValuesArray() As Object = New Object() {InvDate, InvoiceNo, BillToName, BillToAddr1, BillToAddr2, BillToCity, BillToState, BillToZip, ShipToName, ShipToAddr1, ShipToAddr2, ShipToCity, ShipToState, ShipToZip, CustomerPO, Orderno, CustomerItemNo, Qty, CusPackDesc, ItemNo, CaseQty, UnitCost, CaseCost, ExtCost}
            rowinvRptRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowinvRptRow)
            Return rowinvRptRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As invRptDataTable = CType(MyBase.Clone,invRptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New invRptDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInvDate = MyBase.Columns("InvDate")
            Me.columnInvoiceNo = MyBase.Columns("InvoiceNo")
            Me.columnBillToName = MyBase.Columns("BillToName")
            Me.columnBillToAddr1 = MyBase.Columns("BillToAddr1")
            Me.columnBillToAddr2 = MyBase.Columns("BillToAddr2")
            Me.columnBillToCity = MyBase.Columns("BillToCity")
            Me.columnBillToState = MyBase.Columns("BillToState")
            Me.columnBillToZip = MyBase.Columns("BillToZip")
            Me.columnShipToName = MyBase.Columns("ShipToName")
            Me.columnShipToAddr1 = MyBase.Columns("ShipToAddr1")
            Me.columnShipToAddr2 = MyBase.Columns("ShipToAddr2")
            Me.columnShipToCity = MyBase.Columns("ShipToCity")
            Me.columnShipToState = MyBase.Columns("ShipToState")
            Me.columnShipToZip = MyBase.Columns("ShipToZip")
            Me.columnCustomerPO = MyBase.Columns("CustomerPO")
            Me.columnOrderno = MyBase.Columns("Orderno")
            Me.columnCustomerItemNo = MyBase.Columns("CustomerItemNo")
            Me.columnQty = MyBase.Columns("Qty")
            Me.columnCusPackDesc = MyBase.Columns("CusPackDesc")
            Me.columnItemNo = MyBase.Columns("ItemNo")
            Me.columnCaseQty = MyBase.Columns("CaseQty")
            Me.columnUnitCost = MyBase.Columns("UnitCost")
            Me.columnCaseCost = MyBase.Columns("CaseCost")
            Me.columnExtCost = MyBase.Columns("ExtCost")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInvDate = New Global.System.Data.DataColumn("InvDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvDate)
            Me.columnInvoiceNo = New Global.System.Data.DataColumn("InvoiceNo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInvoiceNo)
            Me.columnBillToName = New Global.System.Data.DataColumn("BillToName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToName)
            Me.columnBillToAddr1 = New Global.System.Data.DataColumn("BillToAddr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToAddr1)
            Me.columnBillToAddr2 = New Global.System.Data.DataColumn("BillToAddr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToAddr2)
            Me.columnBillToCity = New Global.System.Data.DataColumn("BillToCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToCity)
            Me.columnBillToState = New Global.System.Data.DataColumn("BillToState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToState)
            Me.columnBillToZip = New Global.System.Data.DataColumn("BillToZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBillToZip)
            Me.columnShipToName = New Global.System.Data.DataColumn("ShipToName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToName)
            Me.columnShipToAddr1 = New Global.System.Data.DataColumn("ShipToAddr1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToAddr1)
            Me.columnShipToAddr2 = New Global.System.Data.DataColumn("ShipToAddr2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToAddr2)
            Me.columnShipToCity = New Global.System.Data.DataColumn("ShipToCity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToCity)
            Me.columnShipToState = New Global.System.Data.DataColumn("ShipToState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToState)
            Me.columnShipToZip = New Global.System.Data.DataColumn("ShipToZip", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShipToZip)
            Me.columnCustomerPO = New Global.System.Data.DataColumn("CustomerPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerPO)
            Me.columnOrderno = New Global.System.Data.DataColumn("Orderno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrderno)
            Me.columnCustomerItemNo = New Global.System.Data.DataColumn("CustomerItemNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomerItemNo)
            Me.columnQty = New Global.System.Data.DataColumn("Qty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQty)
            Me.columnCusPackDesc = New Global.System.Data.DataColumn("CusPackDesc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCusPackDesc)
            Me.columnItemNo = New Global.System.Data.DataColumn("ItemNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItemNo)
            Me.columnCaseQty = New Global.System.Data.DataColumn("CaseQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaseQty)
            Me.columnUnitCost = New Global.System.Data.DataColumn("UnitCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitCost)
            Me.columnCaseCost = New Global.System.Data.DataColumn("CaseCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCaseCost)
            Me.columnExtCost = New Global.System.Data.DataColumn("ExtCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExtCost)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewinvRptRow() As invRptRow
            Return CType(Me.NewRow,invRptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New invRptRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(invRptRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.invRptRowChangedEvent) Is Nothing) Then
                RaiseEvent invRptRowChanged(Me, New invRptRowChangeEvent(CType(e.Row,invRptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.invRptRowChangingEvent) Is Nothing) Then
                RaiseEvent invRptRowChanging(Me, New invRptRowChangeEvent(CType(e.Row,invRptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.invRptRowDeletedEvent) Is Nothing) Then
                RaiseEvent invRptRowDeleted(Me, New invRptRowChangeEvent(CType(e.Row,invRptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.invRptRowDeletingEvent) Is Nothing) Then
                RaiseEvent invRptRowDeleting(Me, New invRptRowChangeEvent(CType(e.Row,invRptRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveinvRptRow(ByVal row As invRptRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsOrderHeader = New dsOrderHeader
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "invRptDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrderHeaderRow
        Inherits Global.System.Data.DataRow
        
        Private tableOrderHeader As OrderHeaderDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrderHeader = CType(Me.Table,OrderHeaderDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.OrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderNo' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.OrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.OrderDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderDate' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.OrderDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipDate' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeliveryDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.DeliveryDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeliveryDate' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.DeliveryDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PickUpDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.PickUpDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PickUpDate' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.PickUpDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PONO() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.PONOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PONO' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.PONOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.BillToCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BillToCode' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.BillToCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToCode() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToCodeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToCode' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToAddr1() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToAddr1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToAddr1' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToAddr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToAddr2() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToAddr2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToAddr2' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToAddr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToCity() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToCityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToCity' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShiptoState() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShiptoStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShiptoState' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShiptoStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToZip() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToZipColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToZip' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salesperson() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.SalespersonColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Salesperson' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.SalespersonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrderStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.OrderStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OrderStatus' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.OrderStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipTermsUID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipTermsUIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipTermsUID' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipTermsUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NetTermsUID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.NetTermsUIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NetTermsUID' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.NetTermsUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToName() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.ShipToNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ShipToName' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.ShipToNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipmentNo() As String
            Get
                If Me.IsShipmentNoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableOrderHeader.ShipmentNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableOrderHeader.ShipmentNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustOrderNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableOrderHeader.CustOrderNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CustOrderNo' in table 'OrderHeader' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrderHeader.CustOrderNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrdrHeaderUID() As Integer
            Get
                Return CType(Me(Me.tableOrderHeader.OrdrHeaderUIDColumn),Integer)
            End Get
            Set
                Me(Me.tableOrderHeader.OrdrHeaderUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderNoNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.OrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderNoNull()
            Me(Me.tableOrderHeader.OrderNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.OrderDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderDateNull()
            Me(Me.tableOrderHeader.OrderDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipDateNull()
            Me(Me.tableOrderHeader.ShipDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeliveryDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.DeliveryDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeliveryDateNull()
            Me(Me.tableOrderHeader.DeliveryDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPickUpDateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.PickUpDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPickUpDateNull()
            Me(Me.tableOrderHeader.PickUpDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPONONull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.PONOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPONONull()
            Me(Me.tableOrderHeader.PONOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToCodeNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.BillToCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToCodeNull()
            Me(Me.tableOrderHeader.BillToCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToCodeNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToCodeNull()
            Me(Me.tableOrderHeader.ShipToCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToAddr1Null() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToAddr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToAddr1Null()
            Me(Me.tableOrderHeader.ShipToAddr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToAddr2Null() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToAddr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToAddr2Null()
            Me(Me.tableOrderHeader.ShipToAddr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToCityNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToCityNull()
            Me(Me.tableOrderHeader.ShipToCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShiptoStateNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShiptoStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShiptoStateNull()
            Me(Me.tableOrderHeader.ShiptoStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToZipNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToZipNull()
            Me(Me.tableOrderHeader.ShipToZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalespersonNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.SalespersonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalespersonNull()
            Me(Me.tableOrderHeader.SalespersonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrderStatusNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.OrderStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrderStatusNull()
            Me(Me.tableOrderHeader.OrderStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipTermsUIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipTermsUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipTermsUIDNull()
            Me(Me.tableOrderHeader.ShipTermsUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNetTermsUIDNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.NetTermsUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNetTermsUIDNull()
            Me(Me.tableOrderHeader.NetTermsUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToNameNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipToNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToNameNull()
            Me(Me.tableOrderHeader.ShipToNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipmentNoNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.ShipmentNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipmentNoNull()
            Me(Me.tableOrderHeader.ShipmentNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustOrderNoNull() As Boolean
            Return Me.IsNull(Me.tableOrderHeader.CustOrderNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustOrderNoNull()
            Me(Me.tableOrderHeader.CustOrderNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class invRptRow
        Inherits Global.System.Data.DataRow
        
        Private tableinvRpt As invRptDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableinvRpt = CType(Me.Table,invRptDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableinvRpt.InvDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InvDate' in table 'invRpt' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableinvRpt.InvDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InvoiceNo() As Integer
            Get
                If Me.IsInvoiceNoNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.InvoiceNoColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.InvoiceNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToName() As String
            Get
                If Me.IsBillToNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToAddr1() As String
            Get
                If Me.IsBillToAddr1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToAddr1Column),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToAddr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToAddr2() As String
            Get
                If Me.IsBillToAddr2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToAddr2Column),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToAddr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToCity() As String
            Get
                If Me.IsBillToCityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToCityColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToState() As String
            Get
                If Me.IsBillToStateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToStateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BillToZip() As String
            Get
                If Me.IsBillToZipNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.BillToZipColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.BillToZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToName() As String
            Get
                If Me.IsShipToNameNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToAddr1() As String
            Get
                If Me.IsShipToAddr1Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToAddr1Column),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToAddr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToAddr2() As String
            Get
                If Me.IsShipToAddr2Null Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToAddr2Column),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToAddr2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToCity() As String
            Get
                If Me.IsShipToCityNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToCityColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToCityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToState() As String
            Get
                If Me.IsShipToStateNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToStateColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShipToZip() As String
            Get
                If Me.IsShipToZipNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ShipToZipColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ShipToZipColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerPO() As String
            Get
                If Me.IsCustomerPONull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.CustomerPOColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.CustomerPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Orderno() As String
            Get
                If Me.IsOrdernoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.OrdernoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.OrdernoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomerItemNo() As String
            Get
                If Me.IsCustomerItemNoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.CustomerItemNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.CustomerItemNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Qty() As Decimal
            Get
                If Me.IsQtyNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.QtyColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CusPackDesc() As String
            Get
                If Me.IsCusPackDescNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.CusPackDescColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.CusPackDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ItemNo() As String
            Get
                If Me.IsItemNoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableinvRpt.ItemNoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ItemNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaseQty() As Integer
            Get
                If Me.IsCaseQtyNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.CaseQtyColumn),Integer)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.CaseQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UnitCost() As Decimal
            Get
                If Me.IsUnitCostNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.UnitCostColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.UnitCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CaseCost() As Decimal
            Get
                If Me.IsCaseCostNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.CaseCostColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.CaseCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ExtCost() As Decimal
            Get
                If Me.IsExtCostNull Then
                    Return 0
                Else
                    Return CType(Me(Me.tableinvRpt.ExtCostColumn),Decimal)
                End If
            End Get
            Set
                Me(Me.tableinvRpt.ExtCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvDateNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.InvDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvDateNull()
            Me(Me.tableinvRpt.InvDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInvoiceNoNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.InvoiceNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInvoiceNoNull()
            Me(Me.tableinvRpt.InvoiceNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToNameNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToNameNull()
            Me(Me.tableinvRpt.BillToNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToAddr1Null() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToAddr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToAddr1Null()
            Me(Me.tableinvRpt.BillToAddr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToAddr2Null() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToAddr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToAddr2Null()
            Me(Me.tableinvRpt.BillToAddr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToCityNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToCityNull()
            Me(Me.tableinvRpt.BillToCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToStateNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToStateNull()
            Me(Me.tableinvRpt.BillToStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBillToZipNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.BillToZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBillToZipNull()
            Me(Me.tableinvRpt.BillToZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToNameNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToNameNull()
            Me(Me.tableinvRpt.ShipToNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToAddr1Null() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToAddr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToAddr1Null()
            Me(Me.tableinvRpt.ShipToAddr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToAddr2Null() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToAddr2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToAddr2Null()
            Me(Me.tableinvRpt.ShipToAddr2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToCityNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToCityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToCityNull()
            Me(Me.tableinvRpt.ShipToCityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToStateNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToStateNull()
            Me(Me.tableinvRpt.ShipToStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShipToZipNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ShipToZipColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShipToZipNull()
            Me(Me.tableinvRpt.ShipToZipColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerPONull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.CustomerPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerPONull()
            Me(Me.tableinvRpt.CustomerPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrdernoNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.OrdernoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrdernoNull()
            Me(Me.tableinvRpt.OrdernoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCustomerItemNoNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.CustomerItemNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCustomerItemNoNull()
            Me(Me.tableinvRpt.CustomerItemNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQtyNull()
            Me(Me.tableinvRpt.QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCusPackDescNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.CusPackDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCusPackDescNull()
            Me(Me.tableinvRpt.CusPackDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsItemNoNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ItemNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetItemNoNull()
            Me(Me.tableinvRpt.ItemNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaseQtyNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.CaseQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaseQtyNull()
            Me(Me.tableinvRpt.CaseQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnitCostNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.UnitCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnitCostNull()
            Me(Me.tableinvRpt.UnitCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCaseCostNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.CaseCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCaseCostNull()
            Me(Me.tableinvRpt.CaseCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExtCostNull() As Boolean
            Return Me.IsNull(Me.tableinvRpt.ExtCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExtCostNull()
            Me(Me.tableinvRpt.ExtCostColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrderHeaderRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As OrderHeaderRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrderHeaderRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrderHeaderRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class invRptRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As invRptRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As invRptRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As invRptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
